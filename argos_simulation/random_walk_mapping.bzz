include "buzz_includes/vec2.bzz"
include "buzz_includes/string.bzz"
 
# Constants
MAX_TRANS_SPEED = 0.05
MAX_ROT_SPEED = 15
ARENA_SIZE = 20.0
ARENA_EDGE_TOLERANCE = 2.0

# Global variable
var l_value = 111

# Calculates and actuates the flocking interaction
function random_movement() {
  # Rotation
  var cur_yaw = ((pose.orientation.yaw % (2. * math.pi)) / math.pi) * 180
  var offset_yaw = rand_uniform(-MAX_ROT_SPEED, MAX_ROT_SPEED)
  
  # Avoid the walls
  if (math.abs(math.abs(pose.position.x)-ARENA_SIZE/2)<ARENA_EDGE_TOLERANCE) {
    if (pose.position.x > 0){
      if (cur_yaw < 90) {
        offset_yaw = offset_yaw + MAX_ROT_SPEED
      }
      if (cur_yaw > 270) {
        offset_yaw = offset_yaw - MAX_ROT_SPEED
      }
    }
    if (pose.position.x < 0){
      if (cur_yaw < 270 and cur_yaw > 180) {
        offset_yaw = offset_yaw + MAX_ROT_SPEED
      }
      if (cur_yaw > 90 and cur_yaw < 180) {
        offset_yaw = offset_yaw - MAX_ROT_SPEED
      }
    }  
  }
  if (math.abs(math.abs(pose.position.y)-ARENA_SIZE/2)<ARENA_EDGE_TOLERANCE){
    if (pose.position.y > 0){
      if (cur_yaw < 180 and cur_yaw > 90) {
        offset_yaw = offset_yaw + MAX_ROT_SPEED
      }
      if (cur_yaw < 90) {
        offset_yaw = offset_yaw - MAX_ROT_SPEED
      }
    }
    if (pose.position.y < 0){
      if (cur_yaw < 360 and cur_yaw > 270) {
        offset_yaw = offset_yaw + MAX_ROT_SPEED
      }
      if (cur_yaw < 270 and cur_yaw > 180) {
        offset_yaw = offset_yaw - MAX_ROT_SPEED
      }
    }
  }

  rotate(offset_yaw * math.pi / 180.0)

  # Translation
  move_forward(MAX_TRANS_SPEED)

  # TESTS
  neighbors.listen("key",
    function(vid, value, rid) {
        l_value = 222
    }
  )

  neighbors.broadcast("key", l_value)
}

# Executed at init time
function init() {
  var nr_robots = 10
  var float_id = float(id)
  var r = int((float_id/(nr_robots/2)) * 200)
  var g = int(math.abs(float_id - (nr_robots/2))/(nr_robots/2) * 200)
  var b = int(200 - float_id*(200/nr_robots))
  
  debug.trajectory.enable(10000, r, g, b)
  srand(id)
  takeoff()
}
 
# Executed every time step
function step() {
  random_movement()
}
 
# Execute at exit
function destroy() {
}