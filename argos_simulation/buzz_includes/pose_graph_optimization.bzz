function start_optimization() {
    # Add current neigbors
    neighbors_in_separator_range = neighbors.filter(
      function(rid, data) { 
        return data.distance < 100 * SEPARATOR_RANGE # ARGoS simulation is in centimeters
      }
    )
    neighbors_in_separator_range.foreach( function(rid, data) { # TODO: Maybe useless
        add_neighbor_within_communication_range(rid)
      }
    )
    # Set speeds
    current_translation_speed = SLOW_TRANSLATION_DURING_OPTIMIZATION
    current_max_rotation_speed = SLOW_ROTATION_DURING_OPTIMIZATION
}

function send_rotation_estimates_to_neighbors() {
    rotation_estimates_table = {}
    number_of_estimates_to_send = 0
    neighbors_in_separator_range.foreach( function(neighbor_in_range_id, neighbor_in_range_data) {
        # Update rotation_estimates_to_send structure
        compute_and_update_rotation_estimates_to_send(neighbor_in_range_id)
        if (size(rotation_estimates_to_send) > 0){
            rotation_estimates_table[number_of_estimates_to_send] = rotation_estimates_to_send
            number_of_estimates_to_send = number_of_estimates_to_send + 1
        }
      }
    )
    if (size(rotation_estimates_table) > 0){
        # Send the rotation estimates
        neighbors.broadcast("rotation_estimates", rotation_estimates_table)
    }
}

function receive_and_update_rotation_estimates_from_neighbors() {
    neighbors.listen("rotation_estimates", 
        function(vid, value, rid) {           
            update_neighbor_rotation_estimates() # TODO
        }
    )
}