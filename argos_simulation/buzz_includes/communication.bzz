# Function share information between robots for separator detection without sensing.
function communication_no_sensing() {
  # Broadcast ground truth pose to compute separator measurement only each SIMULATION_TIME_DIVIDER allow communication
  if (current_step_ % SIMULATION_TIME_DIVIDER == 0) {
    this_robot_ground_truth_pose = {
      .x = pose.position.x,
      .y = pose.position.y,
      .z = pose.position.z,
      .yaw = pose.orientation.yaw,
      .pose_id = pose_id_
    }
    neighbors.broadcast("information_for_fake_separator", this_robot_ground_truth_pose)
  }

  # Listen to neighbor poses
  neighbors.listen("information_for_fake_separator",
    function(vid, value, rid) {   
      # To avoid version control, the robot with the lowest ID in the pair computes the separator
      # To avoid packet loss, we don't compute new separator when they are to close to disconnect. 
      # We also need to avoid adding separator on the first node (0) because it would conflict with the prior (anchoring)
      if (id < rid and neighbors.get(rid).distance/100 < SEPARATOR_RANGE and value.pose_id > 0) {
        current_other_robot_ground_truth_pose = {
          .value = value,
          .rid = rid
        }          
        # Check if we already have an estimate for this robot, if so update it
        other_robot_known = 0
        for (i = 0, i < current_number_of_other_robot_poses_, i = i + 1) {
          if (current_other_robot_ground_truth_poses_[i].rid == rid) {
            current_other_robot_ground_truth_poses_[i] = current_other_robot_ground_truth_pose
            other_robot_known = 1
          }
        }
        # Otherwise add it
        if (not other_robot_known) {
          current_other_robot_ground_truth_poses_[current_number_of_other_robot_poses_] = current_other_robot_ground_truth_pose
          current_number_of_other_robot_poses_ = current_number_of_other_robot_poses_ + 1
        }
      }
    }
  )

  # Listen to neighbor poses
  neighbors.listen("separator_measurements",
    function(vid, value, rid) {   
      for (i = 0, i < value.number, i = i + 1) {
        # Send information to controller to add separator to graph if it concern this robot
        measurement = value.measurements[i]
        if (measurement.robot_1_id == id or measurement.robot_2_id == id) {
          add_separator_to_local_graph(measurement.robot_1_id, measurement.robot_2_id, measurement.robot_1_pose_id, 
                                          measurement.robot_2_pose_id, measurement.x, measurement.y, measurement.z, 
                                          measurement.q_x, measurement.q_y, measurement.q_z, measurement.q_w)
        }
      }
    }
  )
}